basePath: /api/v1
definitions:
  controllers.Customer:
    properties:
      address:
        type: string
      customername:
        type: string
      gender:
        type: integer
      personal:
        type: integer
      phonenumber:
        type: string
      title:
        type: integer
    type: object
  controllers.Department:
    properties:
      departmentname:
        type: string
    type: object
  controllers.Fix:
    properties:
      brand:
        type: integer
      customer:
        type: integer
      date:
        type: string
      fixcomtype:
        type: integer
      personal:
        type: integer
      problemtype:
        type: string
      productnumber:
        type: string
      queue:
        type: string
    type: object
  controllers.Gender:
    properties:
      gendername:
        type: string
    type: object
  controllers.Personal:
    properties:
      department:
        type: integer
      email:
        type: string
      gender:
        type: integer
      password:
        type: string
      personalname:
        type: string
      title:
        type: integer
    type: object
  controllers.Product:
    properties:
      brand:
        type: integer
      numberofproduct:
        type: string
      personal:
        type: integer
      price:
        type: string
      productname:
        type: string
      typeproduct:
        type: integer
    type: object
  controllers.Title:
    type: object
  ent.Brand:
    properties:
      Brandname:
        description: Brandname holds the value of the "Brandname" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BrandEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BrandQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BrandEdges:
    properties:
      fix:
        description: Fix holds the value of the fix edge.
        items:
          $ref: '#/definitions/ent.Fix'
        type: array
      product:
        description: Product holds the value of the product edge.
        items:
          $ref: '#/definitions/ent.Product'
        type: array
    type: object
  ent.Customer:
    properties:
      Address:
        description: Address holds the value of the "Address" field.
        type: string
      Customername:
        description: Customername holds the value of the "Customername" field.
        type: string
      Phonenumber:
        description: Phonenumber holds the value of the "Phonenumber" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CustomerEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CustomerQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.CustomerEdges:
    properties:
      fix:
        description: Fix holds the value of the fix edge.
        items:
          $ref: '#/definitions/ent.Fix'
        type: array
      gender:
        $ref: '#/definitions/ent.Gender'
        description: Gender holds the value of the gender edge.
        type: object
      personal:
        $ref: '#/definitions/ent.Personal'
        description: Personal holds the value of the personal edge.
        type: object
      title:
        $ref: '#/definitions/ent.Title'
        description: Title holds the value of the title edge.
        type: object
    type: object
  ent.Department:
    properties:
      Departmentname:
        description: Departmentname holds the value of the "Departmentname" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DepartmentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DepartmentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DepartmentEdges:
    properties:
      customer:
        description: Customer holds the value of the customer edge.
        items:
          $ref: '#/definitions/ent.Customer'
        type: array
      personal:
        description: Personal holds the value of the personal edge.
        items:
          $ref: '#/definitions/ent.Personal'
        type: array
    type: object
  ent.Fix:
    properties:
      date:
        description: Date holds the value of the "date" field.
        type: string
      edges:
        $ref: '#/definitions/ent.FixEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the FixQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      problemtype:
        description: Problemtype holds the value of the "problemtype" field.
        type: string
      productnumber:
        description: Productnumber holds the value of the "productnumber" field.
        type: string
      queue:
        description: Queue holds the value of the "queue" field.
        type: string
    type: object
  ent.FixEdges:
    properties:
      brand:
        $ref: '#/definitions/ent.Brand'
        description: Brand holds the value of the brand edge.
        type: object
      customer:
        $ref: '#/definitions/ent.Customer'
        description: Customer holds the value of the customer edge.
        type: object
      fixcomtype:
        $ref: '#/definitions/ent.Fixcomtype'
        description: Fixcomtype holds the value of the fixcomtype edge.
        type: object
      personal:
        $ref: '#/definitions/ent.Personal'
        description: Personal holds the value of the personal edge.
        type: object
    type: object
  ent.Fixcomtype:
    properties:
      edges:
        $ref: '#/definitions/ent.FixcomtypeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the FixcomtypeQuery when eager-loading is set.
        type: object
      fixcomtypename:
        description: Fixcomtypename holds the value of the "fixcomtypename" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.FixcomtypeEdges:
    properties:
      fix:
        description: Fix holds the value of the fix edge.
        items:
          $ref: '#/definitions/ent.Fix'
        type: array
    type: object
  ent.Gender:
    properties:
      Gendername:
        description: Gendername holds the value of the "Gendername" field.
        type: string
      edges:
        $ref: '#/definitions/ent.GenderEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the GenderQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.GenderEdges:
    properties:
      customer:
        description: Customer holds the value of the customer edge.
        items:
          $ref: '#/definitions/ent.Customer'
        type: array
      personal:
        description: Personal holds the value of the personal edge.
        items:
          $ref: '#/definitions/ent.Personal'
        type: array
    type: object
  ent.Personal:
    properties:
      Email:
        description: Email holds the value of the "Email" field.
        type: string
      Password:
        description: Password holds the value of the "Password" field.
        type: string
      Personalname:
        description: Personalname holds the value of the "Personalname" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PersonalEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PersonalQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PersonalEdges:
    properties:
      customer:
        description: Customer holds the value of the customer edge.
        items:
          $ref: '#/definitions/ent.Customer'
        type: array
      department:
        $ref: '#/definitions/ent.Department'
        description: Department holds the value of the department edge.
        type: object
      fix:
        description: Fix holds the value of the fix edge.
        items:
          $ref: '#/definitions/ent.Fix'
        type: array
      gender:
        $ref: '#/definitions/ent.Gender'
        description: Gender holds the value of the gender edge.
        type: object
      product:
        description: Product holds the value of the product edge.
        items:
          $ref: '#/definitions/ent.Product'
        type: array
      title:
        $ref: '#/definitions/ent.Title'
        description: Title holds the value of the title edge.
        type: object
    type: object
  ent.Product:
    properties:
      Numberofproduct:
        description: Numberofproduct holds the value of the "Numberofproduct" field.
        type: string
      Price:
        description: Price holds the value of the "Price" field.
        type: string
      Productname:
        description: Productname holds the value of the "Productname" field.
        type: string
      brand:
        type: integer
      edges:
        $ref: '#/definitions/ent.ProductEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProductQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      personal:
        type: integer
      typeproduct:
        type: integer
    type: object
  ent.ProductEdges:
    properties:
      brand:
        $ref: '#/definitions/ent.Brand'
        description: Brand holds the value of the brand edge.
        type: object
      personal:
        $ref: '#/definitions/ent.Personal'
        description: Personal holds the value of the personal edge.
        type: object
      typeproduct:
        $ref: '#/definitions/ent.Typeproduct'
        description: Typeproduct holds the value of the typeproduct edge.
        type: object
    type: object
  ent.Title:
    properties:
      edges:
        $ref: '#/definitions/ent.TitleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the TitleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      titlename:
        description: Titlename holds the value of the "titlename" field.
        type: string
    type: object
  ent.TitleEdges:
    properties:
      customer:
        description: Customer holds the value of the customer edge.
        items:
          $ref: '#/definitions/ent.Customer'
        type: array
      personal:
        description: Personal holds the value of the personal edge.
        items:
          $ref: '#/definitions/ent.Personal'
        type: array
    type: object
  ent.Typeproduct:
    properties:
      Typeproductname:
        description: Typeproductname holds the value of the "Typeproductname" field.
        type: string
      edges:
        $ref: '#/definitions/ent.TypeproductEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the TypeproductQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.TypeproductEdges:
    properties:
      product:
        description: Product holds the value of the product edge.
        items:
          $ref: '#/definitions/ent.Product'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Playlist Vidoe
  version: "1.0"
paths:
  /Fixcomtypes:
    get:
      description: list fixcomtype entities
      operationId: list-fixcomtype
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Fixcomtype'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List fixcomtype entities
  /brand/{id}:
    delete:
      description: get brand by ID
      operationId: delete-brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a brand entity by ID
  /brands:
    get:
      description: list brand entities
      operationId: list-brand
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Brand'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List brand entities
    post:
      consumes:
      - application/json
      description: Create brand
      operationId: create-brand
      parameters:
      - description: Brand entity
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/ent.Brand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Brand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create brand
  /brands/{id}:
    get:
      description: get brand by ID
      operationId: get-brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Brand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a brand entity by ID
  /customers:
    get:
      description: list customer entities
      operationId: list-customer
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Customer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List customer entities
    post:
      consumes:
      - application/json
      description: Create customer
      operationId: create-customer
      parameters:
      - description: Customer entity
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/controllers.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create customer
  /customers/{id}:
    delete:
      description: get customer by ID
      operationId: delete-customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a customer entity by ID
    get:
      description: get customer by ID
      operationId: get-customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a customer entity by ID
    put:
      consumes:
      - application/json
      description: update customer by ID
      operationId: update-customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Customer entity
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/ent.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a customer entity by ID
  /departments:
    get:
      description: list department entities
      operationId: list-department
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Department'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List department entities
    post:
      consumes:
      - application/json
      description: Create departmnet
      operationId: create-departmnet
      parameters:
      - description: Department entity
        in: body
        name: departmnet
        required: true
        schema:
          $ref: '#/definitions/controllers.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create departmnet
  /departments/{id}:
    delete:
      description: get department by ID
      operationId: delete-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a department entity by ID
    get:
      description: get department by ID
      operationId: get-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a department entity by ID
    put:
      consumes:
      - application/json
      description: update department by ID
      operationId: update-department
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Department entity
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/ent.Department'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Department'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a department entity by ID
  /fixcomtype/{id}:
    delete:
      description: get fixcomtype by ID
      operationId: delete-fixcomtype
      parameters:
      - description: Fixcomtype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a fixcomtype entity by ID
  /fixcomtypes:
    post:
      consumes:
      - application/json
      description: Create fixcomtype
      operationId: create-fixcomtype
      parameters:
      - description: Fixcomtype entity
        in: body
        name: fixcomtype
        required: true
        schema:
          $ref: '#/definitions/ent.Fixcomtype'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Fixcomtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create fixcomtype
  /fixcomtypes/{id}:
    get:
      description: get fixcomtype by ID
      operationId: get-fixcomtype
      parameters:
      - description: Fixcomtype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Fixcomtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a fixcomtype entity by ID
  /fixs:
    get:
      description: list fix entities
      operationId: list-fix
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Fix'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List fix entities
    post:
      consumes:
      - application/json
      description: Create fix
      operationId: create-fix
      parameters:
      - description: Fix entity
        in: body
        name: fix
        required: true
        schema:
          $ref: '#/definitions/controllers.Fix'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Fix'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create fix
  /fixs/{id}:
    delete:
      description: get fix by ID
      operationId: delete-fix
      parameters:
      - description: Fix ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a fix entity by ID
    get:
      description: get fix by ID
      operationId: get-fix
      parameters:
      - description: Fix ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Fix'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a fix entity by ID
    put:
      consumes:
      - application/json
      description: update fix by ID
      operationId: update-fix
      parameters:
      - description: Fix ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fix entity
        in: body
        name: fix
        required: true
        schema:
          $ref: '#/definitions/ent.Fix'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Fix'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a fix entity by ID
  /genders:
    get:
      description: list gender entities
      operationId: list-gender
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Gender'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List gender entities
    post:
      consumes:
      - application/json
      description: Create gender
      operationId: create-gender
      parameters:
      - description: Gender entity
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/controllers.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create gender
  /genders/{id}:
    delete:
      description: get gender by ID
      operationId: delete-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a gender entity by ID
    get:
      description: get gender by ID
      operationId: get-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a gender entity by ID
    put:
      consumes:
      - application/json
      description: update gender by ID
      operationId: update-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      - description: Gender entity
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/ent.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a gender entity by ID
  /personals:
    get:
      description: list personal entities
      operationId: list-personal
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Personal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List personal entities
    post:
      consumes:
      - application/json
      description: Create personal
      operationId: create-personal
      parameters:
      - description: Personal entity
        in: body
        name: personal
        required: true
        schema:
          $ref: '#/definitions/controllers.Personal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Personal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create personal
  /personals/{id}:
    delete:
      description: get personal by ID
      operationId: delete-personal
      parameters:
      - description: Personal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a personal entity by ID
    get:
      description: get personal by ID
      operationId: get-personal
      parameters:
      - description: Personal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Personal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a personal entity by ID
    put:
      consumes:
      - application/json
      description: update personal by ID
      operationId: update-personal
      parameters:
      - description: Personal ID
        in: path
        name: id
        required: true
        type: integer
      - description: Personal entity
        in: body
        name: personal
        required: true
        schema:
          $ref: '#/definitions/ent.Personal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Personal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a personal entity by ID
  /products:
    get:
      description: list product entities
      operationId: list-product
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List product entities
    post:
      consumes:
      - application/json
      description: Create product
      operationId: create-product
      parameters:
      - description: Product entity
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/controllers.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create product
  /products/{id}:
    delete:
      description: get product by ID
      operationId: delete-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a product entity by ID
  /titles:
    get:
      description: list title entities
      operationId: list-title
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Title'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List title entities
    post:
      consumes:
      - application/json
      description: Create title
      operationId: create-title
      parameters:
      - description: Title entity
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/controllers.Title'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Title'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create title
  /titles/{id}:
    delete:
      description: get title by ID
      operationId: delete-title
      parameters:
      - description: Title ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a title entity by ID
    get:
      description: get title by ID
      operationId: get-title
      parameters:
      - description: Title ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Title'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a title entity by ID
    put:
      consumes:
      - application/json
      description: update title by ID
      operationId: update-title
      parameters:
      - description: Title ID
        in: path
        name: id
        required: true
        type: integer
      - description: Title entity
        in: body
        name: title
        required: true
        schema:
          $ref: '#/definitions/ent.Title'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Title'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a title entity by ID
  /typeproduct/{id}:
    delete:
      description: get typeproduct by ID
      operationId: delete-typeproduct
      parameters:
      - description: Typeproduct ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a typeproduct entity by ID
  /typeproducts:
    get:
      description: list typeproduct entities
      operationId: list-typeproduct
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Typeproduct'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List typeproduct entities
    post:
      consumes:
      - application/json
      description: Create typeproduct
      operationId: create-typeproduct
      parameters:
      - description: typeproduct entity
        in: body
        name: typeproduct
        required: true
        schema:
          $ref: '#/definitions/ent.Typeproduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Typeproduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create typeproduct
  /typeproducts/{id}:
    get:
      description: get typeproduct by ID
      operationId: get-typeproduct
      parameters:
      - description: Typeproduct ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Typeproduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a typeproduct entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    authorizationUrl: ""
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
