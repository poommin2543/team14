// Code generated by entc, DO NOT EDIT.

package adminrepair

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/tanapon395/playlist-video/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Equipmentdamate applies equality check predicate on the "equipmentdamate" field. It's identical to EquipmentdamateEQ.
func Equipmentdamate(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateEQ applies the EQ predicate on the "equipmentdamate" field.
func EquipmentdamateEQ(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateNEQ applies the NEQ predicate on the "equipmentdamate" field.
func EquipmentdamateNEQ(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateIn applies the In predicate on the "equipmentdamate" field.
func EquipmentdamateIn(vs ...string) predicate.Adminrepair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Adminrepair(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEquipmentdamate), v...))
	})
}

// EquipmentdamateNotIn applies the NotIn predicate on the "equipmentdamate" field.
func EquipmentdamateNotIn(vs ...string) predicate.Adminrepair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Adminrepair(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEquipmentdamate), v...))
	})
}

// EquipmentdamateGT applies the GT predicate on the "equipmentdamate" field.
func EquipmentdamateGT(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateGTE applies the GTE predicate on the "equipmentdamate" field.
func EquipmentdamateGTE(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateLT applies the LT predicate on the "equipmentdamate" field.
func EquipmentdamateLT(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateLTE applies the LTE predicate on the "equipmentdamate" field.
func EquipmentdamateLTE(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateContains applies the Contains predicate on the "equipmentdamate" field.
func EquipmentdamateContains(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateHasPrefix applies the HasPrefix predicate on the "equipmentdamate" field.
func EquipmentdamateHasPrefix(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateHasSuffix applies the HasSuffix predicate on the "equipmentdamate" field.
func EquipmentdamateHasSuffix(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateEqualFold applies the EqualFold predicate on the "equipmentdamate" field.
func EquipmentdamateEqualFold(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEquipmentdamate), v))
	})
}

// EquipmentdamateContainsFold applies the ContainsFold predicate on the "equipmentdamate" field.
func EquipmentdamateContainsFold(v string) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEquipmentdamate), v))
	})
}

// HasReceipt applies the HasEdge predicate on the "receipt" edge.
func HasReceipt() predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceiptTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReceiptTable, ReceiptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiptWith applies the HasEdge predicate on the "receipt" edge with a given conditions (other predicates).
func HasReceiptWith(preds ...predicate.Receipt) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceiptInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReceiptTable, ReceiptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdminrepairPersonal applies the HasEdge predicate on the "AdminrepairPersonal" edge.
func HasAdminrepairPersonal() predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminrepairPersonalTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminrepairPersonalTable, AdminrepairPersonalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminrepairPersonalWith applies the HasEdge predicate on the "AdminrepairPersonal" edge with a given conditions (other predicates).
func HasAdminrepairPersonalWith(preds ...predicate.Personal) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminrepairPersonalInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminrepairPersonalTable, AdminrepairPersonalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdminrepairFix applies the HasEdge predicate on the "AdminrepairFix" edge.
func HasAdminrepairFix() predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminrepairFixTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminrepairFixTable, AdminrepairFixColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminrepairFixWith applies the HasEdge predicate on the "AdminrepairFix" edge with a given conditions (other predicates).
func HasAdminrepairFixWith(preds ...predicate.Fix) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminrepairFixInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminrepairFixTable, AdminrepairFixColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdminrepairProduct applies the HasEdge predicate on the "AdminrepairProduct" edge.
func HasAdminrepairProduct() predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminrepairProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminrepairProductTable, AdminrepairProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminrepairProductWith applies the HasEdge predicate on the "AdminrepairProduct" edge with a given conditions (other predicates).
func HasAdminrepairProductWith(preds ...predicate.Product) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminrepairProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminrepairProductTable, AdminrepairProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Adminrepair) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Adminrepair) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Adminrepair) predicate.Adminrepair {
	return predicate.Adminrepair(func(s *sql.Selector) {
		p(s.Not())
	})
}
