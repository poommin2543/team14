// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/fix"
	"github.com/tanapon395/playlist-video/ent/fixcomtype"
)

// FixcomtypeCreate is the builder for creating a Fixcomtype entity.
type FixcomtypeCreate struct {
	config
	mutation *FixcomtypeMutation
	hooks    []Hook
}

// SetFixcomtypename sets the fixcomtypename field.
func (fc *FixcomtypeCreate) SetFixcomtypename(s string) *FixcomtypeCreate {
	fc.mutation.SetFixcomtypename(s)
	return fc
}

// AddFixIDs adds the fix edge to Fix by ids.
func (fc *FixcomtypeCreate) AddFixIDs(ids ...int) *FixcomtypeCreate {
	fc.mutation.AddFixIDs(ids...)
	return fc
}

// AddFix adds the fix edges to Fix.
func (fc *FixcomtypeCreate) AddFix(f ...*Fix) *FixcomtypeCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFixIDs(ids...)
}

// Mutation returns the FixcomtypeMutation object of the builder.
func (fc *FixcomtypeCreate) Mutation() *FixcomtypeMutation {
	return fc.mutation
}

// Save creates the Fixcomtype in the database.
func (fc *FixcomtypeCreate) Save(ctx context.Context) (*Fixcomtype, error) {
	if _, ok := fc.mutation.Fixcomtypename(); !ok {
		return nil, &ValidationError{Name: "fixcomtypename", err: errors.New("ent: missing required field \"fixcomtypename\"")}
	}
	var (
		err  error
		node *Fixcomtype
	)
	if len(fc.hooks) == 0 {
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixcomtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FixcomtypeCreate) SaveX(ctx context.Context) *Fixcomtype {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FixcomtypeCreate) sqlSave(ctx context.Context) (*Fixcomtype, error) {
	f, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	f.ID = int(id)
	return f, nil
}

func (fc *FixcomtypeCreate) createSpec() (*Fixcomtype, *sqlgraph.CreateSpec) {
	var (
		f     = &Fixcomtype{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fixcomtype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fixcomtype.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.Fixcomtypename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixcomtype.FieldFixcomtypename,
		})
		f.Fixcomtypename = value
	}
	if nodes := fc.mutation.FixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixcomtype.FixTable,
			Columns: []string{fixcomtype.FixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return f, _spec
}
