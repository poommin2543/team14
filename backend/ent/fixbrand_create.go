// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/fix"
	"github.com/tanapon395/playlist-video/ent/fixbrand"
)

// FixbrandCreate is the builder for creating a Fixbrand entity.
type FixbrandCreate struct {
	config
	mutation *FixbrandMutation
	hooks    []Hook
}

// SetFixbrandname sets the fixbrandname field.
func (fc *FixbrandCreate) SetFixbrandname(s string) *FixbrandCreate {
	fc.mutation.SetFixbrandname(s)
	return fc
}

// AddFixIDs adds the fix edge to Fix by ids.
func (fc *FixbrandCreate) AddFixIDs(ids ...int) *FixbrandCreate {
	fc.mutation.AddFixIDs(ids...)
	return fc
}

// AddFix adds the fix edges to Fix.
func (fc *FixbrandCreate) AddFix(f ...*Fix) *FixbrandCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFixIDs(ids...)
}

// Mutation returns the FixbrandMutation object of the builder.
func (fc *FixbrandCreate) Mutation() *FixbrandMutation {
	return fc.mutation
}

// Save creates the Fixbrand in the database.
func (fc *FixbrandCreate) Save(ctx context.Context) (*Fixbrand, error) {
	if _, ok := fc.mutation.Fixbrandname(); !ok {
		return nil, &ValidationError{Name: "fixbrandname", err: errors.New("ent: missing required field \"fixbrandname\"")}
	}
	var (
		err  error
		node *Fixbrand
	)
	if len(fc.hooks) == 0 {
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixbrandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FixbrandCreate) SaveX(ctx context.Context) *Fixbrand {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FixbrandCreate) sqlSave(ctx context.Context) (*Fixbrand, error) {
	f, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	f.ID = int(id)
	return f, nil
}

func (fc *FixbrandCreate) createSpec() (*Fixbrand, *sqlgraph.CreateSpec) {
	var (
		f     = &Fixbrand{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fixbrand.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fixbrand.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.Fixbrandname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fixbrand.FieldFixbrandname,
		})
		f.Fixbrandname = value
	}
	if nodes := fc.mutation.FixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fixbrand.FixTable,
			Columns: []string{fixbrand.FixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return f, _spec
}
