// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/adminrepair"
	"github.com/tanapon395/playlist-video/ent/customer"
	"github.com/tanapon395/playlist-video/ent/fix"
	"github.com/tanapon395/playlist-video/ent/fixbrand"
	"github.com/tanapon395/playlist-video/ent/fixcomtype"
	"github.com/tanapon395/playlist-video/ent/personal"
	"github.com/tanapon395/playlist-video/ent/predicate"
)

// FixUpdate is the builder for updating Fix entities.
type FixUpdate struct {
	config
	hooks      []Hook
	mutation   *FixMutation
	predicates []predicate.Fix
}

// Where adds a new predicate for the builder.
func (fu *FixUpdate) Where(ps ...predicate.Fix) *FixUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetProductnumber sets the productnumber field.
func (fu *FixUpdate) SetProductnumber(s string) *FixUpdate {
	fu.mutation.SetProductnumber(s)
	return fu
}

// SetProblemtype sets the problemtype field.
func (fu *FixUpdate) SetProblemtype(s string) *FixUpdate {
	fu.mutation.SetProblemtype(s)
	return fu
}

// SetQueue sets the queue field.
func (fu *FixUpdate) SetQueue(s string) *FixUpdate {
	fu.mutation.SetQueue(s)
	return fu
}

// SetDate sets the date field.
func (fu *FixUpdate) SetDate(t time.Time) *FixUpdate {
	fu.mutation.SetDate(t)
	return fu
}

// SetFixID sets the fix edge to Adminrepair by id.
func (fu *FixUpdate) SetFixID(id int) *FixUpdate {
	fu.mutation.SetFixID(id)
	return fu
}

// SetNillableFixID sets the fix edge to Adminrepair by id if the given value is not nil.
func (fu *FixUpdate) SetNillableFixID(id *int) *FixUpdate {
	if id != nil {
		fu = fu.SetFixID(*id)
	}
	return fu
}

// SetFix sets the fix edge to Adminrepair.
func (fu *FixUpdate) SetFix(a *Adminrepair) *FixUpdate {
	return fu.SetFixID(a.ID)
}

// SetFixbrandID sets the fixbrand edge to Fixbrand by id.
func (fu *FixUpdate) SetFixbrandID(id int) *FixUpdate {
	fu.mutation.SetFixbrandID(id)
	return fu
}

// SetNillableFixbrandID sets the fixbrand edge to Fixbrand by id if the given value is not nil.
func (fu *FixUpdate) SetNillableFixbrandID(id *int) *FixUpdate {
	if id != nil {
		fu = fu.SetFixbrandID(*id)
	}
	return fu
}

// SetFixbrand sets the fixbrand edge to Fixbrand.
func (fu *FixUpdate) SetFixbrand(f *Fixbrand) *FixUpdate {
	return fu.SetFixbrandID(f.ID)
}

// SetPersonalID sets the personal edge to Personal by id.
func (fu *FixUpdate) SetPersonalID(id int) *FixUpdate {
	fu.mutation.SetPersonalID(id)
	return fu
}

// SetNillablePersonalID sets the personal edge to Personal by id if the given value is not nil.
func (fu *FixUpdate) SetNillablePersonalID(id *int) *FixUpdate {
	if id != nil {
		fu = fu.SetPersonalID(*id)
	}
	return fu
}

// SetPersonal sets the personal edge to Personal.
func (fu *FixUpdate) SetPersonal(p *Personal) *FixUpdate {
	return fu.SetPersonalID(p.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (fu *FixUpdate) SetCustomerID(id int) *FixUpdate {
	fu.mutation.SetCustomerID(id)
	return fu
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (fu *FixUpdate) SetNillableCustomerID(id *int) *FixUpdate {
	if id != nil {
		fu = fu.SetCustomerID(*id)
	}
	return fu
}

// SetCustomer sets the customer edge to Customer.
func (fu *FixUpdate) SetCustomer(c *Customer) *FixUpdate {
	return fu.SetCustomerID(c.ID)
}

// SetFixcomtypeID sets the fixcomtype edge to Fixcomtype by id.
func (fu *FixUpdate) SetFixcomtypeID(id int) *FixUpdate {
	fu.mutation.SetFixcomtypeID(id)
	return fu
}

// SetNillableFixcomtypeID sets the fixcomtype edge to Fixcomtype by id if the given value is not nil.
func (fu *FixUpdate) SetNillableFixcomtypeID(id *int) *FixUpdate {
	if id != nil {
		fu = fu.SetFixcomtypeID(*id)
	}
	return fu
}

// SetFixcomtype sets the fixcomtype edge to Fixcomtype.
func (fu *FixUpdate) SetFixcomtype(f *Fixcomtype) *FixUpdate {
	return fu.SetFixcomtypeID(f.ID)
}

// Mutation returns the FixMutation object of the builder.
func (fu *FixUpdate) Mutation() *FixMutation {
	return fu.mutation
}

// ClearFix clears the fix edge to Adminrepair.
func (fu *FixUpdate) ClearFix() *FixUpdate {
	fu.mutation.ClearFix()
	return fu
}

// ClearFixbrand clears the fixbrand edge to Fixbrand.
func (fu *FixUpdate) ClearFixbrand() *FixUpdate {
	fu.mutation.ClearFixbrand()
	return fu
}

// ClearPersonal clears the personal edge to Personal.
func (fu *FixUpdate) ClearPersonal() *FixUpdate {
	fu.mutation.ClearPersonal()
	return fu
}

// ClearCustomer clears the customer edge to Customer.
func (fu *FixUpdate) ClearCustomer() *FixUpdate {
	fu.mutation.ClearCustomer()
	return fu
}

// ClearFixcomtype clears the fixcomtype edge to Fixcomtype.
func (fu *FixUpdate) ClearFixcomtype() *FixUpdate {
	fu.mutation.ClearFixcomtype()
	return fu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FixUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := fu.mutation.Productnumber(); ok {
		if err := fix.ProductnumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "productnumber", err: fmt.Errorf("ent: validator failed for field \"productnumber\": %w", err)}
		}
	}
	if v, ok := fu.mutation.Problemtype(); ok {
		if err := fix.ProblemtypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "problemtype", err: fmt.Errorf("ent: validator failed for field \"problemtype\": %w", err)}
		}
	}
	if v, ok := fu.mutation.Queue(); ok {
		if err := fix.QueueValidator(v); err != nil {
			return 0, &ValidationError{Name: "queue", err: fmt.Errorf("ent: validator failed for field \"queue\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FixUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FixUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FixUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FixUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fix.Table,
			Columns: fix.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fix.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Productnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fix.FieldProductnumber,
		})
	}
	if value, ok := fu.mutation.Problemtype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fix.FieldProblemtype,
		})
	}
	if value, ok := fu.mutation.Queue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fix.FieldQueue,
		})
	}
	if value, ok := fu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fix.FieldDate,
		})
	}
	if fu.mutation.FixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   fix.FixTable,
			Columns: []string{fix.FixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrepair.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   fix.FixTable,
			Columns: []string{fix.FixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrepair.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FixbrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixbrandTable,
			Columns: []string{fix.FixbrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixbrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FixbrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixbrandTable,
			Columns: []string{fix.FixbrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixbrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.PersonalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.PersonalTable,
			Columns: []string{fix.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.PersonalTable,
			Columns: []string{fix.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.CustomerTable,
			Columns: []string{fix.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.CustomerTable,
			Columns: []string{fix.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FixcomtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixcomtypeTable,
			Columns: []string{fix.FixcomtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixcomtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FixcomtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixcomtypeTable,
			Columns: []string{fix.FixcomtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixcomtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fix.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FixUpdateOne is the builder for updating a single Fix entity.
type FixUpdateOne struct {
	config
	hooks    []Hook
	mutation *FixMutation
}

// SetProductnumber sets the productnumber field.
func (fuo *FixUpdateOne) SetProductnumber(s string) *FixUpdateOne {
	fuo.mutation.SetProductnumber(s)
	return fuo
}

// SetProblemtype sets the problemtype field.
func (fuo *FixUpdateOne) SetProblemtype(s string) *FixUpdateOne {
	fuo.mutation.SetProblemtype(s)
	return fuo
}

// SetQueue sets the queue field.
func (fuo *FixUpdateOne) SetQueue(s string) *FixUpdateOne {
	fuo.mutation.SetQueue(s)
	return fuo
}

// SetDate sets the date field.
func (fuo *FixUpdateOne) SetDate(t time.Time) *FixUpdateOne {
	fuo.mutation.SetDate(t)
	return fuo
}

// SetFixID sets the fix edge to Adminrepair by id.
func (fuo *FixUpdateOne) SetFixID(id int) *FixUpdateOne {
	fuo.mutation.SetFixID(id)
	return fuo
}

// SetNillableFixID sets the fix edge to Adminrepair by id if the given value is not nil.
func (fuo *FixUpdateOne) SetNillableFixID(id *int) *FixUpdateOne {
	if id != nil {
		fuo = fuo.SetFixID(*id)
	}
	return fuo
}

// SetFix sets the fix edge to Adminrepair.
func (fuo *FixUpdateOne) SetFix(a *Adminrepair) *FixUpdateOne {
	return fuo.SetFixID(a.ID)
}

// SetFixbrandID sets the fixbrand edge to Fixbrand by id.
func (fuo *FixUpdateOne) SetFixbrandID(id int) *FixUpdateOne {
	fuo.mutation.SetFixbrandID(id)
	return fuo
}

// SetNillableFixbrandID sets the fixbrand edge to Fixbrand by id if the given value is not nil.
func (fuo *FixUpdateOne) SetNillableFixbrandID(id *int) *FixUpdateOne {
	if id != nil {
		fuo = fuo.SetFixbrandID(*id)
	}
	return fuo
}

// SetFixbrand sets the fixbrand edge to Fixbrand.
func (fuo *FixUpdateOne) SetFixbrand(f *Fixbrand) *FixUpdateOne {
	return fuo.SetFixbrandID(f.ID)
}

// SetPersonalID sets the personal edge to Personal by id.
func (fuo *FixUpdateOne) SetPersonalID(id int) *FixUpdateOne {
	fuo.mutation.SetPersonalID(id)
	return fuo
}

// SetNillablePersonalID sets the personal edge to Personal by id if the given value is not nil.
func (fuo *FixUpdateOne) SetNillablePersonalID(id *int) *FixUpdateOne {
	if id != nil {
		fuo = fuo.SetPersonalID(*id)
	}
	return fuo
}

// SetPersonal sets the personal edge to Personal.
func (fuo *FixUpdateOne) SetPersonal(p *Personal) *FixUpdateOne {
	return fuo.SetPersonalID(p.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (fuo *FixUpdateOne) SetCustomerID(id int) *FixUpdateOne {
	fuo.mutation.SetCustomerID(id)
	return fuo
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (fuo *FixUpdateOne) SetNillableCustomerID(id *int) *FixUpdateOne {
	if id != nil {
		fuo = fuo.SetCustomerID(*id)
	}
	return fuo
}

// SetCustomer sets the customer edge to Customer.
func (fuo *FixUpdateOne) SetCustomer(c *Customer) *FixUpdateOne {
	return fuo.SetCustomerID(c.ID)
}

// SetFixcomtypeID sets the fixcomtype edge to Fixcomtype by id.
func (fuo *FixUpdateOne) SetFixcomtypeID(id int) *FixUpdateOne {
	fuo.mutation.SetFixcomtypeID(id)
	return fuo
}

// SetNillableFixcomtypeID sets the fixcomtype edge to Fixcomtype by id if the given value is not nil.
func (fuo *FixUpdateOne) SetNillableFixcomtypeID(id *int) *FixUpdateOne {
	if id != nil {
		fuo = fuo.SetFixcomtypeID(*id)
	}
	return fuo
}

// SetFixcomtype sets the fixcomtype edge to Fixcomtype.
func (fuo *FixUpdateOne) SetFixcomtype(f *Fixcomtype) *FixUpdateOne {
	return fuo.SetFixcomtypeID(f.ID)
}

// Mutation returns the FixMutation object of the builder.
func (fuo *FixUpdateOne) Mutation() *FixMutation {
	return fuo.mutation
}

// ClearFix clears the fix edge to Adminrepair.
func (fuo *FixUpdateOne) ClearFix() *FixUpdateOne {
	fuo.mutation.ClearFix()
	return fuo
}

// ClearFixbrand clears the fixbrand edge to Fixbrand.
func (fuo *FixUpdateOne) ClearFixbrand() *FixUpdateOne {
	fuo.mutation.ClearFixbrand()
	return fuo
}

// ClearPersonal clears the personal edge to Personal.
func (fuo *FixUpdateOne) ClearPersonal() *FixUpdateOne {
	fuo.mutation.ClearPersonal()
	return fuo
}

// ClearCustomer clears the customer edge to Customer.
func (fuo *FixUpdateOne) ClearCustomer() *FixUpdateOne {
	fuo.mutation.ClearCustomer()
	return fuo
}

// ClearFixcomtype clears the fixcomtype edge to Fixcomtype.
func (fuo *FixUpdateOne) ClearFixcomtype() *FixUpdateOne {
	fuo.mutation.ClearFixcomtype()
	return fuo
}

// Save executes the query and returns the updated entity.
func (fuo *FixUpdateOne) Save(ctx context.Context) (*Fix, error) {
	if v, ok := fuo.mutation.Productnumber(); ok {
		if err := fix.ProductnumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "productnumber", err: fmt.Errorf("ent: validator failed for field \"productnumber\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.Problemtype(); ok {
		if err := fix.ProblemtypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "problemtype", err: fmt.Errorf("ent: validator failed for field \"problemtype\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.Queue(); ok {
		if err := fix.QueueValidator(v); err != nil {
			return nil, &ValidationError{Name: "queue", err: fmt.Errorf("ent: validator failed for field \"queue\": %w", err)}
		}
	}

	var (
		err  error
		node *Fix
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FixUpdateOne) SaveX(ctx context.Context) *Fix {
	f, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return f
}

// Exec executes the query on the entity.
func (fuo *FixUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FixUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FixUpdateOne) sqlSave(ctx context.Context) (f *Fix, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fix.Table,
			Columns: fix.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fix.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Fix.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.Productnumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fix.FieldProductnumber,
		})
	}
	if value, ok := fuo.mutation.Problemtype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fix.FieldProblemtype,
		})
	}
	if value, ok := fuo.mutation.Queue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fix.FieldQueue,
		})
	}
	if value, ok := fuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fix.FieldDate,
		})
	}
	if fuo.mutation.FixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   fix.FixTable,
			Columns: []string{fix.FixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrepair.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   fix.FixTable,
			Columns: []string{fix.FixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrepair.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FixbrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixbrandTable,
			Columns: []string{fix.FixbrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixbrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FixbrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixbrandTable,
			Columns: []string{fix.FixbrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixbrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.PersonalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.PersonalTable,
			Columns: []string{fix.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.PersonalTable,
			Columns: []string{fix.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.CustomerTable,
			Columns: []string{fix.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.CustomerTable,
			Columns: []string{fix.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FixcomtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixcomtypeTable,
			Columns: []string{fix.FixcomtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixcomtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FixcomtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fix.FixcomtypeTable,
			Columns: []string{fix.FixcomtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fixcomtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	f = &Fix{config: fuo.config}
	_spec.Assign = f.assignValues
	_spec.ScanValues = f.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fix.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}
