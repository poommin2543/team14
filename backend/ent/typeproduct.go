// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tanapon395/playlist-video/ent/typeproduct"
)

// Typeproduct is the model entity for the Typeproduct schema.
type Typeproduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Typeproductname holds the value of the "Typeproductname" field.
	Typeproductname string `json:"Typeproductname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TypeproductQuery when eager-loading is set.
	Edges TypeproductEdges `json:"edges"`
}

// TypeproductEdges holds the relations/edges for other nodes in the graph.
type TypeproductEdges struct {
	// Product holds the value of the product edge.
	Product []*Product
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e TypeproductEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Typeproduct) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Typeproductname
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Typeproduct fields.
func (t *Typeproduct) assignValues(values ...interface{}) error {
	if m, n := len(values), len(typeproduct.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Typeproductname", values[0])
	} else if value.Valid {
		t.Typeproductname = value.String
	}
	return nil
}

// QueryProduct queries the product edge of the Typeproduct.
func (t *Typeproduct) QueryProduct() *ProductQuery {
	return (&TypeproductClient{config: t.config}).QueryProduct(t)
}

// Update returns a builder for updating this Typeproduct.
// Note that, you need to call Typeproduct.Unwrap() before calling this method, if this Typeproduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Typeproduct) Update() *TypeproductUpdateOne {
	return (&TypeproductClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Typeproduct) Unwrap() *Typeproduct {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Typeproduct is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Typeproduct) String() string {
	var builder strings.Builder
	builder.WriteString("Typeproduct(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", Typeproductname=")
	builder.WriteString(t.Typeproductname)
	builder.WriteByte(')')
	return builder.String()
}

// Typeproducts is a parsable slice of Typeproduct.
type Typeproducts []*Typeproduct

func (t Typeproducts) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
