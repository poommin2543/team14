// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/fix"
)

// FixCreate is the builder for creating a Fix entity.
type FixCreate struct {
	config
	mutation *FixMutation
	hooks    []Hook
}

// Mutation returns the FixMutation object of the builder.
func (fc *FixCreate) Mutation() *FixMutation {
	return fc.mutation
}

// Save creates the Fix in the database.
func (fc *FixCreate) Save(ctx context.Context) (*Fix, error) {
	var (
		err  error
		node *Fix
	)
	if len(fc.hooks) == 0 {
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FixMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FixCreate) SaveX(ctx context.Context) *Fix {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FixCreate) sqlSave(ctx context.Context) (*Fix, error) {
	f, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	f.ID = int(id)
	return f, nil
}

func (fc *FixCreate) createSpec() (*Fix, *sqlgraph.CreateSpec) {
	var (
		f     = &Fix{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fix.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fix.FieldID,
			},
		}
	)
	return f, _spec
}
