// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tanapon395/playlist-video/ent/paymenttype"
)

// PaymentType is the model entity for the PaymentType schema.
type PaymentType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Typename holds the value of the "Typename" field.
	Typename string `json:"Typename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentTypeQuery when eager-loading is set.
	Edges PaymentTypeEdges `json:"edges"`
}

// PaymentTypeEdges holds the relations/edges for other nodes in the graph.
type PaymentTypeEdges struct {
	// Receipt holds the value of the receipt edge.
	Receipt []*Receipt
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReceiptOrErr returns the Receipt value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentTypeEdges) ReceiptOrErr() ([]*Receipt, error) {
	if e.loadedTypes[0] {
		return e.Receipt, nil
	}
	return nil, &NotLoadedError{edge: "receipt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Typename
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentType fields.
func (pt *PaymentType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(paymenttype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Typename", values[0])
	} else if value.Valid {
		pt.Typename = value.String
	}
	return nil
}

// QueryReceipt queries the receipt edge of the PaymentType.
func (pt *PaymentType) QueryReceipt() *ReceiptQuery {
	return (&PaymentTypeClient{config: pt.config}).QueryReceipt(pt)
}

// Update returns a builder for updating this PaymentType.
// Note that, you need to call PaymentType.Unwrap() before calling this method, if this PaymentType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PaymentType) Update() *PaymentTypeUpdateOne {
	return (&PaymentTypeClient{config: pt.config}).UpdateOne(pt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pt *PaymentType) Unwrap() *PaymentType {
	tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentType is not a transactional entity")
	}
	pt.config.driver = tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PaymentType) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentType(")
	builder.WriteString(fmt.Sprintf("id=%v", pt.ID))
	builder.WriteString(", Typename=")
	builder.WriteString(pt.Typename)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentTypes is a parsable slice of PaymentType.
type PaymentTypes []*PaymentType

func (pt PaymentTypes) config(cfg config) {
	for _i := range pt {
		pt[_i].config = cfg
	}
}
