// Code generated by entc, DO NOT EDIT.

package personal

const (
	// Label holds the string label denoting the personal type in the database.
	Label = "personal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPersonalname holds the string denoting the personalname field in the database.
	FieldPersonalname = "personalname"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"

	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeTitle holds the string denoting the title edge name in mutations.
	EdgeTitle = "title"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeGender holds the string denoting the gender edge name in mutations.
	EdgeGender = "gender"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeFix holds the string denoting the fix edge name in mutations.
	EdgeFix = "fix"
	// EdgePersonal holds the string denoting the personal edge name in mutations.
	EdgePersonal = "personal"
	// EdgeReceipt holds the string denoting the receipt edge name in mutations.
	EdgeReceipt = "receipt"

	// Table holds the table name of the personal in the database.
	Table = "personals"
	// CustomerTable is the table the holds the customer relation/edge.
	CustomerTable = "customers"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "personal_id"
	// TitleTable is the table the holds the title relation/edge.
	TitleTable = "personals"
	// TitleInverseTable is the table name for the Title entity.
	// It exists in this package in order to avoid circular dependency with the "title" package.
	TitleInverseTable = "titles"
	// TitleColumn is the table column denoting the title relation/edge.
	TitleColumn = "title_id"
	// DepartmentTable is the table the holds the department relation/edge.
	DepartmentTable = "personals"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_id"
	// GenderTable is the table the holds the gender relation/edge.
	GenderTable = "personals"
	// GenderInverseTable is the table name for the Gender entity.
	// It exists in this package in order to avoid circular dependency with the "gender" package.
	GenderInverseTable = "genders"
	// GenderColumn is the table column denoting the gender relation/edge.
	GenderColumn = "gender_id"
	// ProductTable is the table the holds the product relation/edge.
	ProductTable = "products"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "Personal"
	// FixTable is the table the holds the fix relation/edge.
	FixTable = "fixes"
	// FixInverseTable is the table name for the Fix entity.
	// It exists in this package in order to avoid circular dependency with the "fix" package.
	FixInverseTable = "fixes"
	// FixColumn is the table column denoting the fix relation/edge.
	FixColumn = "personal_id"
	// PersonalTable is the table the holds the personal relation/edge.
	PersonalTable = "adminrepairs"
	// PersonalInverseTable is the table name for the Adminrepair entity.
	// It exists in this package in order to avoid circular dependency with the "adminrepair" package.
	PersonalInverseTable = "adminrepairs"
	// PersonalColumn is the table column denoting the personal relation/edge.
	PersonalColumn = "personal_id"
	// ReceiptTable is the table the holds the receipt relation/edge.
	ReceiptTable = "receipts"
	// ReceiptInverseTable is the table name for the Receipt entity.
	// It exists in this package in order to avoid circular dependency with the "receipt" package.
	ReceiptInverseTable = "receipts"
	// ReceiptColumn is the table column denoting the receipt relation/edge.
	ReceiptColumn = "personal_id"
)

// Columns holds all SQL columns for personal fields.
var Columns = []string{
	FieldID,
	FieldPersonalname,
	FieldEmail,
	FieldPassword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Personal type.
var ForeignKeys = []string{
	"department_id",
	"gender_id",
	"title_id",
}

var (
	// PersonalnameValidator is a validator for the "Personalname" field. It is called by the builders before save.
	PersonalnameValidator func(string) error
	// EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)
