// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/customer"
	"github.com/tanapon395/playlist-video/ent/department"
	"github.com/tanapon395/playlist-video/ent/gender"
	"github.com/tanapon395/playlist-video/ent/personal"
	"github.com/tanapon395/playlist-video/ent/product"
	"github.com/tanapon395/playlist-video/ent/title"
)

// PersonalCreate is the builder for creating a Personal entity.
type PersonalCreate struct {
	config
	mutation *PersonalMutation
	hooks    []Hook
}

// SetName sets the Name field.
func (pc *PersonalCreate) SetName(s string) *PersonalCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetEmail sets the Email field.
func (pc *PersonalCreate) SetEmail(s string) *PersonalCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetPassword sets the Password field.
func (pc *PersonalCreate) SetPassword(s string) *PersonalCreate {
	pc.mutation.SetPassword(s)
	return pc
}

// AddCustomerIDs adds the customer edge to Customer by ids.
func (pc *PersonalCreate) AddCustomerIDs(ids ...int) *PersonalCreate {
	pc.mutation.AddCustomerIDs(ids...)
	return pc
}

// AddCustomer adds the customer edges to Customer.
func (pc *PersonalCreate) AddCustomer(c ...*Customer) *PersonalCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCustomerIDs(ids...)
}

// SetTitleID sets the title edge to Title by id.
func (pc *PersonalCreate) SetTitleID(id int) *PersonalCreate {
	pc.mutation.SetTitleID(id)
	return pc
}

// SetNillableTitleID sets the title edge to Title by id if the given value is not nil.
func (pc *PersonalCreate) SetNillableTitleID(id *int) *PersonalCreate {
	if id != nil {
		pc = pc.SetTitleID(*id)
	}
	return pc
}

// SetTitle sets the title edge to Title.
func (pc *PersonalCreate) SetTitle(t *Title) *PersonalCreate {
	return pc.SetTitleID(t.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (pc *PersonalCreate) SetDepartmentID(id int) *PersonalCreate {
	pc.mutation.SetDepartmentID(id)
	return pc
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (pc *PersonalCreate) SetNillableDepartmentID(id *int) *PersonalCreate {
	if id != nil {
		pc = pc.SetDepartmentID(*id)
	}
	return pc
}

// SetDepartment sets the department edge to Department.
func (pc *PersonalCreate) SetDepartment(d *Department) *PersonalCreate {
	return pc.SetDepartmentID(d.ID)
}

// SetGenderID sets the gender edge to Gender by id.
func (pc *PersonalCreate) SetGenderID(id int) *PersonalCreate {
	pc.mutation.SetGenderID(id)
	return pc
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (pc *PersonalCreate) SetNillableGenderID(id *int) *PersonalCreate {
	if id != nil {
		pc = pc.SetGenderID(*id)
	}
	return pc
}

// SetGender sets the gender edge to Gender.
func (pc *PersonalCreate) SetGender(g *Gender) *PersonalCreate {
	return pc.SetGenderID(g.ID)
}

// AddProductIDs adds the product edge to Product by ids.
func (pc *PersonalCreate) AddProductIDs(ids ...int) *PersonalCreate {
	pc.mutation.AddProductIDs(ids...)
	return pc
}

// AddProduct adds the product edges to Product.
func (pc *PersonalCreate) AddProduct(p ...*Product) *PersonalCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductIDs(ids...)
}

// Mutation returns the PersonalMutation object of the builder.
func (pc *PersonalCreate) Mutation() *PersonalMutation {
	return pc.mutation
}

// Save creates the Personal in the database.
func (pc *PersonalCreate) Save(ctx context.Context) (*Personal, error) {
	if _, ok := pc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "Name", err: errors.New("ent: missing required field \"Name\"")}
	}
	if _, ok := pc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "Email", err: errors.New("ent: missing required field \"Email\"")}
	}
	if _, ok := pc.mutation.Password(); !ok {
		return nil, &ValidationError{Name: "Password", err: errors.New("ent: missing required field \"Password\"")}
	}
	var (
		err  error
		node *Personal
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonalCreate) SaveX(ctx context.Context) *Personal {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PersonalCreate) sqlSave(ctx context.Context) (*Personal, error) {
	pe, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pe.ID = int(id)
	return pe, nil
}

func (pc *PersonalCreate) createSpec() (*Personal, *sqlgraph.CreateSpec) {
	var (
		pe    = &Personal{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: personal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: personal.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldName,
		})
		pe.Name = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldEmail,
		})
		pe.Email = value
	}
	if value, ok := pc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personal.FieldPassword,
		})
		pe.Password = value
	}
	if nodes := pc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.CustomerTable,
			Columns: []string{personal.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personal.TitleTable,
			Columns: []string{personal.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personal.DepartmentTable,
			Columns: []string{personal.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personal.GenderTable,
			Columns: []string{personal.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personal.ProductTable,
			Columns: []string{personal.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pe, _spec
}
