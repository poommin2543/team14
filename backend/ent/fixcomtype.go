// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tanapon395/playlist-video/ent/fixcomtype"
)

// Fixcomtype is the model entity for the Fixcomtype schema.
type Fixcomtype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Fixcomtypename holds the value of the "fixcomtypename" field.
	Fixcomtypename string `json:"fixcomtypename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FixcomtypeQuery when eager-loading is set.
	Edges FixcomtypeEdges `json:"edges"`
}

// FixcomtypeEdges holds the relations/edges for other nodes in the graph.
type FixcomtypeEdges struct {
	// Fix holds the value of the fix edge.
	Fix []*Fix
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FixOrErr returns the Fix value or an error if the edge
// was not loaded in eager-loading.
func (e FixcomtypeEdges) FixOrErr() ([]*Fix, error) {
	if e.loadedTypes[0] {
		return e.Fix, nil
	}
	return nil, &NotLoadedError{edge: "fix"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fixcomtype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // fixcomtypename
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fixcomtype fields.
func (f *Fixcomtype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(fixcomtype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field fixcomtypename", values[0])
	} else if value.Valid {
		f.Fixcomtypename = value.String
	}
	return nil
}

// QueryFix queries the fix edge of the Fixcomtype.
func (f *Fixcomtype) QueryFix() *FixQuery {
	return (&FixcomtypeClient{config: f.config}).QueryFix(f)
}

// Update returns a builder for updating this Fixcomtype.
// Note that, you need to call Fixcomtype.Unwrap() before calling this method, if this Fixcomtype
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fixcomtype) Update() *FixcomtypeUpdateOne {
	return (&FixcomtypeClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Fixcomtype) Unwrap() *Fixcomtype {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fixcomtype is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fixcomtype) String() string {
	var builder strings.Builder
	builder.WriteString("Fixcomtype(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", fixcomtypename=")
	builder.WriteString(f.Fixcomtypename)
	builder.WriteByte(')')
	return builder.String()
}

// Fixcomtypes is a parsable slice of Fixcomtype.
type Fixcomtypes []*Fixcomtype

func (f Fixcomtypes) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
